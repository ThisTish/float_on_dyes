generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  slug         String   @unique(map: "product_slug_idx")
  brand        String
  category     String
  plastic      String
  description  String
  images       String[]
  discType     String[]
  tags         String[]
  color        String[]
  dyeType      String[]
  price        Decimal  @default(0) @db.Decimal(12, 2)
  speed        Int      @default(0)
  glide        Int      @default(0)
  turn         Int      @default(0)
  fade         Int      @default(0)
  weight       Float    @default(0)
  stock        Int      @default(1)
  isStamped    Boolean  @default(true)
  isAvailable  Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  isDiscounted Boolean  @default(false)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @default("No_Name")
  email         String     @unique(map: "user_email_idx")
  password      String?
  emailVerified DateTime?  @db.Timestamp(6)
  image         String?
  role          String     @default("user")
  address       Json?      @db.Json
  isSubscribed  Boolean    @default(false)
  paymentMethod String?
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  updatedAt     DateTime   @updatedAt
  account       Account[]
  session       Session[]
  cart          Cart[]
  wishList      WishList[]

  @@map("users")
}

model Account {
  userId            String   @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @id
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id      String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token   String
  expires DateTime
  email   String

  @@id([id, token])
  @@map("verification_tokens")
}

model ResetPasswordToken {
  id      String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token   String
  expires DateTime
  email   String

  @@id([id, token])
  @@map("reset_password_tokens")
}

model Cart {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String? @db.Uuid
  sessionCartId String
  items         Json[]  @default([]) @db.Json
  itemsPrice    Decimal @default(0) @db.Decimal(12, 2)
  totalPrice    Decimal @default(0) @db.Decimal(12, 2)
  shippingPrice Decimal @default(0) @db.Decimal(12, 2)
  taxPrice      Decimal @default(0) @db.Decimal(12, 2)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WishList {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  items     Json[]   @default([]) @db.Json
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
